{"version":3,"file":"main.iframe.bundle.js","mappings":"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","sources":["webpack://hajimari/./.storybook/preview.js","webpack://hajimari/./.storybook/preview.js-generated-config-entry.js","webpack://hajimari/./generated-stories-entry.js","webpack://hajimari/./src/components/Card/Card.stories.tsx","webpack://hajimari/./src/components/CardHeader/CardHeader.stories.tsx","webpack://hajimari/./src/components/ImageGridItem/ImageGridItem.stories.tsx","webpack://hajimari/./src/components/InformationCard/InformationCard.stories.tsx","webpack://hajimari/./src/colors.ts","webpack://hajimari/./src/components/Card/Card.tsx","webpack://hajimari/./src/components/Card/index.ts","webpack://hajimari/./src/components/CardContent/CardContent.tsx","webpack://hajimari/./src/components/CardContent/index.ts","webpack://hajimari/./src/components/CardHeader/CardHeader.tsx","webpack://hajimari/./src/components/CardHeader/index.ts","webpack://hajimari/./src/components/ImageGrid/ImageGrid.tsx","webpack://hajimari/./src/components/ImageGridItem/ImageGridItem.tsx","webpack://hajimari/./src/components/InformationCard/InformationCard.tsx","webpack://hajimari/./src/components/LineItem/LineItem.tsx","webpack://hajimari/./src/components/Typography/Typography.tsx","webpack://hajimari/./src/components/Typography/index.ts","webpack://hajimari/./src/theme.ts","webpack://hajimari/./src/Colors.stories.mdx","webpack://hajimari/./src/Template.stories.mdx","webpack://hajimari/./src/components/Card/Card.stories.mdx","webpack://hajimari/./src/components/ImageGrid/ImageGrid.stories.mdx","webpack://hajimari/./src/components/LineItem/LineItem.stories.mdx","webpack://hajimari/\\.)(","webpack://hajimari/ignored|/Users/sondhayni/hajimari/node_modules/object-inspect|./util.inspect"],"sourcesContent":["import { ThemeProvider as MUIThemeProvider } from '@mui/material/styles';\nimport { StylesProvider } from '@mui/styles';\nimport { ThemeProvider } from 'emotion-theming';\n\nimport theme from '../src/theme';\n\n// https://storybook.js.org/docs/react/writing-stories/parameters#global-parameters\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  layout: 'centered',\n  argTypes: {\n    color: {\n      value: 'basic1100',\n      control: { type: 'select' },\n      options: Object.keys({ ...theme.palette.common }),\n      mapping: Object.keys({ ...theme.palette.common }).reduce((mapping, colorKey) => ({\n        ...mapping, [colorKey]: theme.palette.common[colorKey],\n      })),\n    },\n  },\n  backgrounds: {\n    default: 'light blue',\n    values: [\n      {\n        name: 'light blue',\n        value: '#F4F6F9',\n      },\n      {\n        name: 'white',\n        value: '#ffffff',\n      },\n    ],\n  },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n};\n\nexport const decorators = [\n  (Story) => (\n    <StylesProvider injectFirst>\n      <MUIThemeProvider theme={theme}>\n        <ThemeProvider theme={theme}>\n          {Story()}\n        </ThemeProvider>\n      </MUIThemeProvider>\n    </StylesProvider>\n  )\n];\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/Users/sondhayni/hajimari/node_modules/@storybook/client-api';\nimport { logger } from '/Users/sondhayni/hajimari/node_modules/@storybook/client-logger';\nimport * as config from '/Users/sondhayni/hajimari/.storybook/preview.js';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n    case 'argTypes':\n      {\n        return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    case 'decorateStory':\n    case 'renderToDOM':\n      {\n        return null; // This key is not handled directly in v6 mode.\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('./src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stor(y|ies)\\.(tsx|ts|mdx))$/)], module, false);","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { ComponentMeta, Story } from '@storybook/react';\\nimport { withDesign } from 'storybook-addon-designs';\\nimport { ArgType } from '@storybook/components';\\n\\nimport Card, { CardProps } from './Card';\\nimport CardHeader from '../CardHeader';\\nimport CardContent from '../CardContent';\\n\\nimport theme from '../../theme';\\n\\nexport const argTypes = {\\n  border: {\\n    name: 'border color',\\n    control: { type: 'select' },\\n    defaultValue: 'basic500',\\n    options: Object.keys({ ...theme.palette.common }),\\n    table: {\\n      category: 'Card',\\n      type: {\\n        summary: 'Any color',\\n      }\\n    },\\n  },\\n  bg: {\\n    name: 'fill',\\n    value: 'basic1100',\\n    control: 'select',\\n    options: Object.keys({ ...theme.palette.common }),\\n    table: {\\n      type: {\\n        summary: 'a color'\\n      },\\n      category: 'Card',\\n    },\\n  },\\n  bottomDivider: {\\n    control: { type: 'boolean' },\\n    defaultValue: true,\\n    table: {\\n      category: 'CardHeader',\\n    },\\n  },\\n  header: {\\n    defaultValue: 'This is a header',\\n    control: {\\n      type: 'text',\\n    },\\n    table: {\\n      category: 'CardHeader',\\n    },\\n  },\\n  content: {\\n    defaultValue: 'This is some content',\\n    control: {\\n      type: 'text',\\n    },\\n    table: {\\n      category: 'CardContent',\\n    },\\n  },\\n};\\n\\ntype TemplateArgs = {\\n  header?: ArgType;\\n  content?: ArgType;\\n  bottomDivider: ArgType;\\n} & CardProps;\\n\\nexport default {\\n  title: 'Atoms/Card',\\n  decorators: [withDesign],\\n  includeStories: [],\\n  component: Card,\\n  parameters: {\\n    actions: { disabled: true },\\n    layout: 'centered',\\n  },\\n  argTypes: argTypes,\\n} as unknown as ComponentMeta<typeof Card>;\\n\\nconst headerArgTypes = ['bottomDivider'];\\n\\nconst CardTemplate = ({ header, content, ...args }: TemplateArgs): JSX.Element => {\\n  // pull out the args related to CardHeader\\n  const headerArgs = Object.entries(args).reduce((val, currArg) => {\\n    // if they belong to CardHeader, push them into that key\\n    if (headerArgTypes.includes(currArg[0])) {\\n      return { ...val, [currArg[0]]: currArg[1] };\\n    }\\n\\n    /*\\n      header: {\\n        [arg]: arg value,\\n        ...\\n      },\\n      card: {\\n        [arg]: arg value\\n      }\\n    */\\n    return val;\\n  }, {});\\n\\n  const cardArgs = Object.entries(args).reduce((val, currArg) => {\\n    if (headerArgTypes.includes(currArg[0])) {\\n      return val;\\n    }\\n\\n    return { ...val, [currArg[0]]: currArg[1] };\\n  }, {});\\n\\n  return (\\n    <Card {...cardArgs}>\\n      {header &&\\n        <CardHeader {...headerArgs}>\\n          {header}\\n        </CardHeader>\\n      }\\n      {content &&\\n        <CardContent>\\n          {content}\\n        </CardContent>\\n      }\\n    </Card>\\n  );\\n};\\n\\nexport const card: Story<TemplateArgs> = CardTemplate.bind({});\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"card\":{\"startLoc\":{\"col\":21,\"line\":83},\"endLoc\":{\"col\":1,\"line\":125},\"startBody\":{\"col\":21,\"line\":83},\"endBody\":{\"col\":1,\"line\":125}}};\n    \nimport { ComponentMeta, Story } from '@storybook/react';\nimport { withDesign } from 'storybook-addon-designs';\nimport { ArgType } from '@storybook/components';\n\nimport Card, { CardProps } from './Card';\nimport CardHeader from '../CardHeader';\nimport CardContent from '../CardContent';\n\nimport theme from '../../theme';\n\nexport const argTypes = {\n  border: {\n    name: 'border color',\n    control: { type: 'select' },\n    defaultValue: 'basic500',\n    options: Object.keys({ ...theme.palette.common }),\n    table: {\n      category: 'Card',\n      type: {\n        summary: 'Any color',\n      }\n    },\n  },\n  bg: {\n    name: 'fill',\n    value: 'basic1100',\n    control: 'select',\n    options: Object.keys({ ...theme.palette.common }),\n    table: {\n      type: {\n        summary: 'a color'\n      },\n      category: 'Card',\n    },\n  },\n  bottomDivider: {\n    control: { type: 'boolean' },\n    defaultValue: true,\n    table: {\n      category: 'CardHeader',\n    },\n  },\n  header: {\n    defaultValue: 'This is a header',\n    control: {\n      type: 'text',\n    },\n    table: {\n      category: 'CardHeader',\n    },\n  },\n  content: {\n    defaultValue: 'This is some content',\n    control: {\n      type: 'text',\n    },\n    table: {\n      category: 'CardContent',\n    },\n  },\n};\n\ntype TemplateArgs = {\n  header?: ArgType;\n  content?: ArgType;\n  bottomDivider: ArgType;\n} & CardProps;\n\nexport default {\n  title: 'Atoms/Card',\n  decorators: [withDesign],\n  includeStories: [],\n  component: Card,\n  parameters: {\n    actions: { disabled: true },\n    layout: 'centered',\n  },\n  argTypes: argTypes,\n} as unknown as ComponentMeta<typeof Card>;\n\nconst headerArgTypes = ['bottomDivider'];\n\nconst CardTemplate = ({ header, content, ...args }: TemplateArgs): JSX.Element => {\n  // pull out the args related to CardHeader\n  const headerArgs = Object.entries(args).reduce((val, currArg) => {\n    // if they belong to CardHeader, push them into that key\n    if (headerArgTypes.includes(currArg[0])) {\n      return { ...val, [currArg[0]]: currArg[1] };\n    }\n\n    /*\n      header: {\n        [arg]: arg value,\n        ...\n      },\n      card: {\n        [arg]: arg value\n      }\n    */\n    return val;\n  }, {});\n\n  const cardArgs = Object.entries(args).reduce((val, currArg) => {\n    if (headerArgTypes.includes(currArg[0])) {\n      return val;\n    }\n\n    return { ...val, [currArg[0]]: currArg[1] };\n  }, {});\n\n  return (\n    <Card {...cardArgs}>\n      {header &&\n        <CardHeader {...headerArgs}>\n          {header}\n        </CardHeader>\n      }\n      {content &&\n        <CardContent>\n          {content}\n        </CardContent>\n      }\n    </Card>\n  );\n};\n\nexport const card: Story<TemplateArgs> = CardTemplate.bind({});\n\n\n\ncard.parameters = { storySource: { source: \"({ header, content, ...args }: TemplateArgs): JSX.Element => {\\n  // pull out the args related to CardHeader\\n  const headerArgs = Object.entries(args).reduce((val, currArg) => {\\n    // if they belong to CardHeader, push them into that key\\n    if (headerArgTypes.includes(currArg[0])) {\\n      return { ...val, [currArg[0]]: currArg[1] };\\n    }\\n\\n    /*\\n      header: {\\n        [arg]: arg value,\\n        ...\\n      },\\n      card: {\\n        [arg]: arg value\\n      }\\n    */\\n    return val;\\n  }, {});\\n\\n  const cardArgs = Object.entries(args).reduce((val, currArg) => {\\n    if (headerArgTypes.includes(currArg[0])) {\\n      return val;\\n    }\\n\\n    return { ...val, [currArg[0]]: currArg[1] };\\n  }, {});\\n\\n  return (\\n    <Card {...cardArgs}>\\n      {header &&\\n        <CardHeader {...headerArgs}>\\n          {header}\\n        </CardHeader>\\n      }\\n      {content &&\\n        <CardContent>\\n          {content}\\n        </CardContent>\\n      }\\n    </Card>\\n  );\\n}\" }, ...card.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Box } from '@mui/material';\\nimport { Meta } from '@storybook/react';\\nimport { withDesign } from 'storybook-addon-designs';\\nimport NewReleasesOutlinedIcon from '@mui/icons-material/NewReleasesOutlined';\\nimport MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined';\\n\\nimport CardHeader, { CardHeaderProps } from './CardHeader';\\n\\nexport const argTypes = {\\n  children: {\\n    name: 'content',\\n    control: {\\n      type: 'text',\\n    },\\n    defaultValue: 'This is a header',\\n  },\\n  bottomDivider: {\\n    control: { type: 'boolean' },\\n    defaultValue: true,\\n  }\\n};\\n\\nexport default {\\n  title: 'Atoms/Card/CardHeader',\\n  decorators: [withDesign],\\n  includeStories: ['cardHeader', 'cardHeaderTemplate'],\\n  component: CardHeader,\\n  parameters: {\\n    actions: { disabled: true },\\n    layout: 'centered',\\n  },\\n  argTypes: argTypes,\\n} as Meta;\\n\\nexport const cardHeaderTemplate = (args: CardHeaderProps): JSX.Element => {\\n  return (\\n    <CardHeader\\n      // TODO(design_system): add control to dynamically change these objects somehow\\n      avatar={<NewReleasesOutlinedIcon />}\\n      action={\\n        <Box sx={{ mb: '-2px', ml: 2 }}>\\n          <MoreVertOutlinedIcon />\\n        </Box>\\n      }\\n      {...args}\\n    />\\n  );\\n}\\n\\nexport const cardHeader = (args: CardHeaderProps): JSX.Element => (\\n  <CardHeader {...args} />\\n);\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"cardHeaderTemplate\":{\"startLoc\":{\"col\":34,\"line\":35},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":34,\"line\":35},\"endBody\":{\"col\":1,\"line\":48}},\"cardHeader\":{\"startLoc\":{\"col\":26,\"line\":50},\"endLoc\":{\"col\":1,\"line\":52},\"startBody\":{\"col\":26,\"line\":50},\"endBody\":{\"col\":1,\"line\":52}}};\n    \nimport { Box } from '@mui/material';\nimport { Meta } from '@storybook/react';\nimport { withDesign } from 'storybook-addon-designs';\nimport NewReleasesOutlinedIcon from '@mui/icons-material/NewReleasesOutlined';\nimport MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined';\n\nimport CardHeader, { CardHeaderProps } from './CardHeader';\n\nexport const argTypes = {\n  children: {\n    name: 'content',\n    control: {\n      type: 'text',\n    },\n    defaultValue: 'This is a header',\n  },\n  bottomDivider: {\n    control: { type: 'boolean' },\n    defaultValue: true,\n  }\n};\n\nexport default {\n  title: 'Atoms/Card/CardHeader',\n  decorators: [withDesign],\n  includeStories: ['cardHeader', 'cardHeaderTemplate'],\n  component: CardHeader,\n  parameters: {\n    actions: { disabled: true },\n    layout: 'centered',\n  },\n  argTypes: argTypes,\n} as Meta;\n\nexport const cardHeaderTemplate = (args: CardHeaderProps): JSX.Element => {\n  return (\n    <CardHeader\n      // TODO(design_system): add control to dynamically change these objects somehow\n      avatar={<NewReleasesOutlinedIcon />}\n      action={\n        <Box sx={{ mb: '-2px', ml: 2 }}>\n          <MoreVertOutlinedIcon />\n        </Box>\n      }\n      {...args}\n    />\n  );\n};\n\nexport const cardHeader = (args: CardHeaderProps): JSX.Element => (\n  <CardHeader {...args} />\n);\n\n\ncardHeaderTemplate.parameters = { storySource: { source: \"(args: CardHeaderProps): JSX.Element => {\\n  return (\\n    <CardHeader\\n      // TODO(design_system): add control to dynamically change these objects somehow\\n      avatar={<NewReleasesOutlinedIcon />}\\n      action={\\n        <Box sx={{ mb: '-2px', ml: 2 }}>\\n          <MoreVertOutlinedIcon />\\n        </Box>\\n      }\\n      {...args}\\n    />\\n  );\\n}\" }, ...cardHeaderTemplate.parameters };\ncardHeader.parameters = { storySource: { source: \"(args: CardHeaderProps): JSX.Element => (\\n  <CardHeader {...args} />\\n)\" }, ...cardHeader.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport { Meta } from '@storybook/react';\\n\\nimport ImageGridItem, { ImageGridItemProps } from './ImageGridItem';\\n\\nexport const argTypes = {\\n  src: {\\n    control: {\\n      type: 'text',\\n    },\\n    defaultValue: 'https://hearth.imgix.net/logos/hearth-2018.svg',\\n  },\\n  alt: {\\n    control: {\\n      type: 'text',\\n    },\\n    defaultValue: 'Hearth logo',\\n  },\\n  rows: {\\n    control: {\\n      type: 'number',\\n    },\\n    defaultValue: 2,\\n  }\\n};\\n\\nexport default {\\n  title: 'Atoms/ImageGridItem',\\n  includeStories: ['imageItem'],\\n  component: ImageGridItem,\\n  parameters: {\\n    actions: { disabled: true },\\n    layout: 'centered',\\n  },\\n  argTypes: argTypes,\\n} as Meta;\\n\\nconst ImageItem = (args: ImageGridItemProps): JSX.Element => (\\n  <ImageGridItem\\n    sx={{ p: 3 }}\\n    {...args}\\n  />\\n);\\n\\nexport const imageItem = ImageItem.bind({});\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"imageItem\":{\"startLoc\":{\"col\":18,\"line\":38},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":18,\"line\":38},\"endBody\":{\"col\":1,\"line\":43}}};\n    \nimport React from 'react';\nimport { Meta } from '@storybook/react';\n\nimport ImageGridItem, { ImageGridItemProps } from './ImageGridItem';\n\nexport const argTypes = {\n  src: {\n    control: {\n      type: 'text',\n    },\n    defaultValue: 'https://hearth.imgix.net/logos/hearth-2018.svg',\n  },\n  alt: {\n    control: {\n      type: 'text',\n    },\n    defaultValue: 'Hearth logo',\n  },\n  rows: {\n    control: {\n      type: 'number',\n    },\n    defaultValue: 2,\n  }\n};\n\nexport default {\n  title: 'Atoms/ImageGridItem',\n  includeStories: ['imageItem'],\n  component: ImageGridItem,\n  parameters: {\n    actions: { disabled: true },\n    layout: 'centered',\n  },\n  argTypes: argTypes,\n} as Meta;\n\nconst ImageItem = (args: ImageGridItemProps): JSX.Element => (\n  <ImageGridItem\n    sx={{ p: 3 }}\n    {...args}\n  />\n);\n\nexport const imageItem = ImageItem.bind({});\n\n\nimageItem.parameters = { storySource: { source: \"(args: ImageGridItemProps): JSX.Element => (\\n  <ImageGridItem\\n    sx={{ p: 3 }}\\n    {...args}\\n  />\\n)\" }, ...imageItem.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Meta, Story } from '@storybook/react';\\nimport { Box } from '@mui/material';\\nimport { withDesign } from 'storybook-addon-designs';\\n\\nimport InformationCard, { InformationCardProps } from './InformationCard';\\n\\nexport default {\\n  title: 'Molecules/InformationCard',\\n  decorators: [withDesign],\\n  component: InformationCard,\\n  parameters: {\\n    actions: { disabled: true },\\n    layout: 'centered',\\n  },\\n  argTypes: {\\n    // add maxWidth arg type here\\n    title: {\\n      defaultValue: 'Personal note',\\n      name: 'title',\\n      control: {\\n        type: 'text',\\n      },\\n      table: {\\n        defaultValue: { summary: 'Personal note' },\\n      },\\n    },\\n    children: {\\n      name: 'content',\\n      defaultValue: 'Thank you for the oppurtunity to work together! ' +\\n        'Take a look at what the project would entail and please ' +\\n        'reach out if you have any questions of concerns.',\\n      control: {\\n        type: 'text',\\n      },\\n    },\\n  },\\n} as Meta;\\n\\nconst cardTemplate: Story<InformationCardProps> = (args) => (\\n  <Box sx={{ maxWidth: 500 }}>\\n    <InformationCard {...args} />\\n  </Box>\\n);\\n\\nexport const TextInformationCard = cardTemplate.bind({});\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"TextInformationCard\":{\"startLoc\":{\"col\":50,\"line\":39},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":50,\"line\":39},\"endBody\":{\"col\":1,\"line\":43}}};\n    \nimport { Meta, Story } from '@storybook/react';\nimport { Box } from '@mui/material';\nimport { withDesign } from 'storybook-addon-designs';\n\nimport InformationCard, { InformationCardProps } from './InformationCard';\n\nexport default {\n  title: 'Molecules/InformationCard',\n  decorators: [withDesign],\n  component: InformationCard,\n  parameters: {\n    actions: { disabled: true },\n    layout: 'centered',\n  },\n  argTypes: {\n    // add maxWidth arg type here\n    title: {\n      defaultValue: 'Personal note',\n      name: 'title',\n      control: {\n        type: 'text',\n      },\n      table: {\n        defaultValue: { summary: 'Personal note' },\n      },\n    },\n    children: {\n      name: 'content',\n      defaultValue: 'Thank you for the oppurtunity to work together! ' +\n        'Take a look at what the project would entail and please ' +\n        'reach out if you have any questions of concerns.',\n      control: {\n        type: 'text',\n      },\n    },\n  },\n} as Meta;\n\nconst cardTemplate: Story<InformationCardProps> = (args) => (\n  <Box sx={{ maxWidth: 500 }}>\n    <InformationCard {...args} />\n  </Box>\n);\n\nexport const TextInformationCard = cardTemplate.bind({});\n\n\n\nTextInformationCard.parameters = { storySource: { source: \"(args) => (\\n  <Box sx={{ maxWidth: 500 }}>\\n    <InformationCard {...args} />\\n  </Box>\\n)\" }, ...TextInformationCard.parameters };","const colors: Record<Color, string | undefined> = {\n  // grayscale\n  basic100: '#FFFFFF',\n  basic300: '#F4F6F9',\n  basic500: '#E7E9EB',\n  basic700: '#B6BCC2',\n  basic900: '#86909A',\n  basic1100: '#0D2135',\n  // blues\n  primary100: '#E6EEF6',\n  primary300: '#CCDDED',\n  primary500: '#0154A4',\n  primary700: '#1B4774',\n  primary900: '#0D2135',\n  // greens\n  success100: '#E7F5F1',\n  success300: '#D0ECE2',\n  success500: '#139F6F',\n  success700: '#0E7753',\n  success900: '#0A5038',\n  //yellows\n  warning100: '#FFF8EB',\n  warning300: '#FFF1D6',\n  warning500: '#FFB900',\n  warning700: '#E5A701',\n  warning900: '#926B01',\n  // reds\n  danger100: '#FEE6DA',\n  danger300: '#FCA28F',\n  danger500: '#F84647',\n  danger700: '#C9393A',\n  danger900: '#7A2223',\n  inherit: undefined,\n  transparent: undefined,\n};\n\nexport default colors;","import React from 'react';\nimport MuiCard, { CardProps as MuiCardProps } from '@mui/material/Card';\n\nimport theme from '../../theme';\n\nexport interface CardColorProperty {\n  border?: Color;\n  bg?: Color;\n}\n\nexport interface CardProps extends MuiCardProps, CardColorProperty { }\n\nconst Card = ({\n  border,\n  children,\n  bg = 'basic100',\n  sx,\n  ...props\n}: CardProps): JSX.Element => (\n  <MuiCard\n    elevation={0}\n    sx={{\n      border: border ? `1px solid ${theme.palette.common[border]}` : 'inherit',\n      borderRadius: '16px',\n      '&.MuiPaper-root': {\n        backgroundColor: theme.palette.common[bg],\n      },\n      ...sx,\n    }}\n    {...props}\n  >\n    {children}\n  </MuiCard>\n);\n\nexport default Card;","export { default } from './Card';\nexport * from './Card';","import React from 'react';\nimport MuiCardContent, {\n  CardContentProps as MuiCardContentProps\n} from '@mui/material/CardContent';\n\nimport { CardColorProperty } from '../Card/Card';\n\nexport interface CardContentProps extends MuiCardContentProps, CardColorProperty { }\n\nconst CardContent = ({\n  children,\n  bg,\n  ...props\n}: CardContentProps): JSX.Element => (\n  <MuiCardContent\n    sx={{\n      backgroundColor: bg ?? 'inherit'\n    }}\n    {...props}\n  >\n    {children}\n  </MuiCardContent>\n);\n\nexport default CardContent;","export { default } from './CardContent';\nexport * from './CardContent';\n","import React from 'react';\nimport { CardHeader as MuiCardHeader, Divider } from '@mui/material';\nimport { CardHeaderProps as MuiCardHeaderProps } from '@mui/material/CardHeader';\n\nimport { CardColorProperty } from '../Card/Card';\n\nexport interface CardHeaderProps extends MuiCardHeaderProps, CardColorProperty {\n  bottomDivider?: boolean;\n}\n\nconst CardHeader = ({\n  bottomDivider,\n  children,\n  bg,\n  sx,\n  ...otherProps\n}: CardHeaderProps): JSX.Element => (\n  <>\n    <MuiCardHeader\n      // TODO(design_system): move this out into a composable module\n      sx={{\n        '&.MuiCardHeader-root': {\n          padding: `24px 24px ${bottomDivider ? '16px' : 0}`,\n          backgroundColor: bg ?? 'inherit',\n          '.MuiCardHeader-action': {\n            alignSelf: 'center',\n          },\n          '.MuiCardHeader-avatar': {\n            alignSelf: 'center',\n          },\n        },\n        ...sx,\n      }}\n      title={children}\n      {...otherProps}\n    />\n    {bottomDivider &&\n      <Divider />\n    }\n  </>\n);\n\nexport default CardHeader;","export { default } from './CardHeader';\nexport * from './CardHeader';\n","import { ImageList as MuiImageList } from '@mui/material';\nimport { ImageListProps as MuiImageListProps } from '@mui/material/ImageList';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ImageGridProps extends MuiImageListProps { }\n\nconst ImageGrid = ({ children, ...props }: ImageGridProps): JSX.Element => (\n  <MuiImageList\n    cols={2}\n    gap={16}\n    {...props}\n  >\n    {children}\n  </MuiImageList>\n);\n\nexport default ImageGrid;","import { useState } from 'react';\nimport {\n  Box,\n  Dialog,\n  ImageListItem as MuiImageItem,\n  ImageListItemBar,\n} from '@mui/material';\nimport BrokenImageOutlinedIcon from '@mui/icons-material/BrokenImageOutlined';\nimport { ImageListItemProps as MuiImageListItemProps } from '@mui/material/ImageListItem';\n\nimport Card from '../Card';\n\nexport interface ImageItem {\n  /**\n   * The source string of an image, accepts the same values as the src prop\n   * of a the standard HTML img element\n   */\n  src: string;\n  /**\n   * A useful description of the image\n   */\n  alt: string;\n}\n\nexport interface ImageGridItemProps extends MuiImageListItemProps {\n  src: ImageItem['src'];\n  alt: ImageItem['alt'];\n  action?: React.ReactNode;\n}\n\nconst sharedStyles = {\n  boxShadow: '0px 0px 2px rgba(0, 0, 0, 0.4)',\n  borderRadius: '8px',\n};\n\nconst ImageGridItem = ({\n  src,\n  alt,\n  action,\n  ...props\n}: ImageGridItemProps): JSX.Element => {\n  const [showBrokenImage, setShowBrokenImage] = useState(false);\n  const [imageEnlarged, setImageEnlarged] = useState(false);\n\n  if (showBrokenImage) {\n    return (\n      <Card border=\"basic700\" bg=\"basic500\">\n        <Box sx={{ px: 8, py: 5, ...sharedStyles }}>\n          <BrokenImageOutlinedIcon sx={{ color: 'common.basic700' }} fontSize=\"large\" />\n        </Box>\n      </Card>\n    );\n  }\n\n  return (\n    <MuiImageItem sx={sharedStyles} {...props}>\n      <img\n        src={src}\n        alt={alt}\n        style={{ borderRadius: 8 }}\n        onError={() => setShowBrokenImage(true)}\n        onClick={() => setImageEnlarged(true)}\n      />\n      <ImageListItemBar\n        sx={{\n          background: 'none',\n          // this makes the action element more visible when the color is similar to its background\n          filter: 'drop-shadow(0px 0px 2px rgba(0, 0, 0, 0.4))',\n        }}\n        position=\"top\"\n        actionPosition=\"right\"\n        actionIcon={action}\n      />\n      <Dialog open={imageEnlarged} onClose={() => setImageEnlarged(false)}>\n        <img src={src} alt={alt} />\n      </Dialog>\n    </MuiImageItem>\n  );\n};\n\nexport default ImageGridItem;","import Card from '../Card';\nimport CardHeader from '../CardHeader';\nimport CardContent from '../CardContent';\nimport Typography from '../Typography';\n\nexport interface InformationCardProps {\n  title: string;\n  children: React.ReactNode;\n}\n\nconst InformationCard = ({ title, children }: InformationCardProps): JSX.Element => {\n\n  return (\n    <Card>\n      <CardHeader>\n        <Typography color=\"basic1100\" variant=\"p2\" weight=\"medium\">\n          {title}\n        </Typography>\n      </CardHeader>\n      <CardContent\n        bg=\"basic100\"\n        sx={{\n          '&.MuiCardContent-root': {\n            padding: '16px 24px 32px',\n          }\n        }}\n      >\n        <Typography variant=\"p2\" color=\"basic900\">\n          {children}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default InformationCard;","import React from 'react';\nimport { Box } from '@mui/material';\n\nimport Typography from '../Typography';\n\nexport interface LineItemProps {\n  /* left side element */\n  leftContent: React.ReactNode;\n  /* right side element */\n  rightContent: React.ReactNode;\n  /* total width of the LineItem; by default takes up the full width of its container */\n  width?: number | string;\n}\n\nconst LineItem = ({\n  leftContent,\n  rightContent,\n  width = '100%',\n}: LineItemProps): JSX.Element => (\n  <Box sx={{ display: 'flex', width }}>\n    <Typography variant=\"p1\" color=\"basic1100\">\n      {leftContent}\n    </Typography>\n      <Box\n        sx={{\n          backgroundImage: 'linear-gradient(to right, black 10%, rgba(255,255,255,0) 0%)',\n          backgroundPosition: 'center',\n          backgroundSize: '10px 1px',\n          backgroundRepeat: 'repeat-x',\n          flex: 1,\n          mx: '8px',\n        }}\n      />\n    <Typography variant=\"p1\" color=\"basic1100\">\n      {rightContent}\n    </Typography>\n  </Box>\n);\n\nexport default LineItem;","import React from 'react';\nimport MuiTypography, { TypographyProps as MuiTypographyProps } from '@mui/material/Typography';\n\nimport colors from '../../colors';\n\nexport type FontWeightVariant = 'regular' | 'medium' | 'semibold';\nexport type FontWeightValue = 400 | 500 | 600;\n\ntype FontWeight = {\n  [w in FontWeightVariant]: FontWeightValue;\n};\n\nexport const fontWeights: FontWeight = {\n  regular: 400,\n  medium: 500,\n  semibold: 600,\n};\n\nexport interface TypographyProps extends MuiTypographyProps {\n  weight?: FontWeightVariant;\n  color?: Color;\n}\n\nconst Typography = ({\n  weight,\n  color,\n  sx,\n  ...otherProps\n}: TypographyProps): JSX.Element => (\n  <MuiTypography\n    sx={{\n      fontWeight: weight ? fontWeights[weight] : 'inherit',\n      color: color ? colors[color] : 'inherit',\n      ...sx,\n    }}\n    {...otherProps}\n  />\n);\n\nexport default Typography;\n","export { default } from './Typography';\nexport * from './Typography';\n","import { ThemeOptions, createTheme } from '@mui/material/styles';\n\nimport colors from './colors';\n\ndeclare module '@mui/material/styles' {\n  interface TypographyVariants {\n    p1: React.CSSProperties;\n    p2: React.CSSProperties;\n    p3: React.CSSProperties;\n  }\n\n  // allow configuration using `createTheme`\n  interface TypographyVariantsOptions {\n    p1?: React.CSSProperties;\n    p2?: React.CSSProperties;\n    p3?: React.CSSProperties;\n  }\n}\n\n// Update the Typography's variant prop options\ndeclare module '@mui/material/Typography' {\n  interface TypographyPropsVariantOverrides {\n    p1: true;\n    p2: true;\n    p3: true;\n    // if we need to customize text, we can directly pass sx or wrap with a Box\n    inherit: false;\n  }\n}\n\ndeclare module '@mui/material/styles/createPalette' {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface CommonColors extends Record<Color, string> {\n  }\n}\n\nconst pxToRem = createTheme().typography.pxToRem;\n\nexport const componentOverrides: ThemeOptions['components'] = {\n  MuiTypography: {\n    defaultProps: {\n      fontFamily: \"'Poppins', sans-serif, 'Lora', serif\",\n    },\n  },\n  MuiCard: {\n    styleOverrides: {\n      root: {\n        fontFamily: \"'Poppins', sans-serif, 'Lora', serif\",\n        borderRadius: 4,\n      },\n    },\n  },\n  MuiCardHeader: {\n    styleOverrides: {\n      root: {\n        alignItems: 'center',\n      },\n    },\n  },\n  MuiDivider: {\n    styleOverrides: {\n      root: {\n        color: colors.basic700,\n      },\n    },\n  },\n};\n\n\nexport const themeOptions: ThemeOptions = {\n  palette: {\n    common: { ...colors },\n  },\n  typography: {\n    fontFamily: \"'Poppins', sans-serif, 'Lora', serif\",\n    // TODO(design_system): add responsive sizes for breakpoints\n    h1: {\n      fontSize: pxToRem(24),\n      lineHeight: pxToRem(36),\n    },\n    h2: {\n      fontSize: pxToRem(20),\n      lineHeight: pxToRem(28),\n    },\n    // fontFamily must be explicitly defined, since these are custom\n    // variants without any MUI defaults\n    p1: {\n      fontSize: pxToRem(16),\n      lineHeight: pxToRem(24),\n      fontFamily: \"'Poppins', sans-serif\",\n    },\n    p2: {\n      fontSize: pxToRem(14),\n      lineHeight: pxToRem(20),\n      fontFamily: \"'Poppins', sans-serif\",\n    },\n    p3: {\n      fontSize: pxToRem(12),\n      lineHeight: pxToRem(16),\n      fontFamily: \"'Poppins', sans-serif\",\n    },\n  },\n  components: { ...componentOverrides },\n};\n\nexport default createTheme(themeOptions);\n\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, ColorPalette, ColorItem } from \"@storybook/addon-docs\";\nimport { Box } from \"@mui/material\";\nimport colors from \"./colors\";\nexport const primaryColors = Object.entries(colors).filter(color => color[0].includes(\"primary\"));\nexport const basicColors = Object.entries(colors).filter(color => color[0].includes(\"basic\"));\nexport const successColors = Object.entries(colors).filter(color => color[0].includes(\"success\"));\nexport const warningColors = Object.entries(colors).filter(color => color[0].includes(\"warning\"));\nexport const dangerColors = Object.entries(colors).filter(color => color[0].includes(\"danger\"));\n\nconst layoutProps = {\n  primaryColors,\nbasicColors,\nsuccessColors,\nwarningColors,\ndangerColors\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Tokens/Colors\" mdxType=\"Meta\" />\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"color-palette\"\n    }}>{`Color Palette`}</h1>\n    <Box my={3} mdxType=\"Box\" />\n    <ColorPalette mdxType=\"ColorPalette\">\n  <ColorItem title=\"Greyscale\" subtitle=\"Basic 100 - 900\" colors={Object.fromEntries(basicColors)} mdxType=\"ColorItem\" />\n  <ColorItem title=\"Blue\" subtitle=\"Primary 100 - 900\" colors={Object.fromEntries(primaryColors)} mdxType=\"ColorItem\" />\n  <ColorItem title=\"Green\" subtitle=\"Success 100 - 900\" colors={Object.fromEntries(successColors)} mdxType=\"ColorItem\" />\n  <ColorItem title=\"Yellow\" subtitle=\"Warning 100 - 900\" colors={Object.fromEntries(warningColors)} mdxType=\"ColorItem\" />\n  <ColorItem title=\"Red\" subtitle=\"Danger 100 - 900\" colors={Object.fromEntries(dangerColors)} mdxType=\"ColorItem\" />\n    </ColorPalette>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'Tokens/Colors', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta } from \"@storybook/addon-docs\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"MDX Template\" mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"todo-component-name\"\n    }}>{`TODO: Component name`}</h1>\n    <p><strong parentName=\"p\">{`DATE ADDED`}</strong>{`: `}{`[Date]`}{` | `}<strong parentName=\"p\">{`PROJECT`}</strong>{`: `}{`[Project name with link to Notion, Figma, etc]`}</p>\n    <p><strong parentName=\"p\">{`TODO`}</strong>{` -- add a \"user facing\" description of the component here; include why and where it was first added,\nthe general use case, and any other relevant context.`}</p>\n    <br />\n    <hr></hr>\n    <br />\n    <h3 {...{\n      \"id\": \"usage-and-examples\"\n    }}>{`Usage and examples`}</h3>\n    <p><strong parentName=\"p\">{`TODO`}</strong>{` -- add a more technical description of the component here, which will generally be some information\nabout the available props; this can be listed as a table:`}</p>\n    <br />\n    <h4 {...{\n      \"id\": \"default--basic\"\n    }}>{`Default / Basic:`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Short description of the basic use case of this component. Include a code snippet and canvas.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`<Canvas>\n  <Story name=\"Basic\">{component}<Story>\n</Canvas>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h4>\n    <p><strong parentName=\"p\">{`TODO`}</strong>{` -- add other variants / usage examples here, following the same format as the \"Basic\" example.`}</p>\n    <br />\n    <hr></hr>\n    <br />\n    <h3 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h3>\n    <p><strong parentName=\"p\">{`TODO`}</strong>{` -- This is where the component will actually be rendered with `}<a parentName=\"p\" {...{\n        \"href\": \"https://storybook.js.org/docs/react/essentials/controls/\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`interactive controls`}</a>{`. There should be a control\nfor each prop that someone can change (i.e. background color, border color, width, or whatever else is appropriate for a given\ncomponent).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<Canvas>\n  <Story name=\"Playground\">{component}</Story>\n</Canvas>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'MDX Template', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Canvas, Meta, Story, ArgsTable } from \"@storybook/addon-docs\";\nimport { Card } from \"./Card\";\nimport { card, argTypes } from \"./Card.stories.tsx\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Atoms/Card\" component={Card} argTypes={argTypes} parameters={{\n      backgrounds: {\n        default: \"light blue\",\n        values: [{\n          name: \"light blue\",\n          value: \"#F4F6F9\"\n        }]\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"card\"\n    }}>{`Card`}</h1>\n    <p>{`A card is a basic component to be used across the product.\nIt can be composed of `}<inlineCode parentName=\"p\">{`CardHeader`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CardContent`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story story={card} name=\"Playground\" height=\"150px\" mdxType=\"Story\" />\n    </Canvas>\n    <ArgsTable of={Card} story=\"Playground\" mdxType=\"ArgsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const _card_ = card;\n_card_.storyName = 'Playground';\n\nconst componentMeta = { title: 'Atoms/Card', parameters: {\n  backgrounds: {\n    default: \"light blue\",\n    values: [{\n      name: \"light blue\",\n      value: \"#F4F6F9\"\n    }]\n  }\n}, component: Card, argTypes: argTypes, includeStories: [\"_card_\"],  };\n\nconst mdxStoryNameToKey = {\"Playground\":\"_card_\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Props, Canvas, Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport ImageGrid, { ImageGridProps } from './ImageGrid';\nimport ImageGridItem, { ImageItem } from '../ImageGridItem';\nexport const argTypes = {\n  cols: {\n    control: {\n      type: 'number'\n    },\n    defaultValue: 2\n  }\n};\nexport const ImageGridTemplate = args => <ImageGrid {...args} mdxType=\"ImageGrid\" />;\nexport const images = [{\n  src: 'https://hearth.imgix.net/offerspage/addition.jpg',\n  alt: 'addition'\n}, {\n  src: 'https://hearth.imgix.net/offerspage/basement.jpg',\n  alt: 'basement'\n}, {\n  src: 'https://hearth.imgix.net/offerspage/kitchen.jpg',\n  alt: 'kitchen'\n}, {\n  src: 'https://hearth.imgix.net/offerspage/solar.jpg',\n  alt: 'solar'\n}];\n\nconst layoutProps = {\n  argTypes,\nImageGridTemplate,\nimages\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Molecules/ImageGrid\" component={ImageGrid} subcomponents={{\n      ImageGridItem: ImageGridItem\n    }} argTypes={argTypes} mdxType=\"Meta\" />\n\n\n    <h1 {...{\n      \"id\": \"imagegrid\"\n    }}>{`ImageGrid`}</h1>\n    <p>{`An `}<inlineCode parentName=\"p\">{`ImageGrid`}</inlineCode>{` component accepts `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`, which should be an object array of `}<inlineCode parentName=\"p\">{`ReactNode`}</inlineCode>{`,\nusually an `}<inlineCode parentName=\"p\">{`ImageGridItem`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Even total cards\" args={{\n        variant: 'quilted',\n        rowHeight: 140,\n        children: images.map((image, index) => <ImageGridItem src={image.src} alt={image.alt} cols={index === images.length - 1 && index % 2 === 0 ? 2 : 1} rows={1} mdxType=\"ImageGridItem\" />)\n      }} mdxType=\"Story\">\n    {ImageGridTemplate.bind({})}\n  </Story>\n    </Canvas>\n    <ArgsTable story=\"Even total cards\" mdxType=\"ArgsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const evenTotalCards = ImageGridTemplate.bind({});\nevenTotalCards.storyName = 'Even total cards';\nevenTotalCards.args = {\n  variant: 'quilted',\n  rowHeight: 140,\n  children: images.map((image, index) => <ImageGridItem src={image.src} alt={image.alt} cols={index === images.length - 1 && index % 2 === 0 ? 2 : 1} rows={1} />)\n};\nevenTotalCards.parameters = { storySource: { source: 'args => <ImageGrid {...args} />' } };\n\nconst componentMeta = { title: 'Molecules/ImageGrid', component: ImageGrid, subcomponents: {\n  ImageGridItem: ImageGridItem\n}, argTypes: argTypes, includeStories: [\"evenTotalCards\"],  };\n\nconst mdxStoryNameToKey = {\"Even total cards\":\"evenTotalCards\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Canvas, Meta, Story, ArgsTable } from '@storybook/addon-docs';\nimport { withDesign } from 'storybook-addon-designs';\nimport { Box } from '@mui/material';\nimport AllInclusiveIcon from '@mui/icons-material/AllInclusive';\nimport LineItem from './LineItem';\nimport Typography from '../Typography';\nexport const argTypes = {\n  leftContent: {\n    defaultValue: 'Subtotal',\n    control: {\n      type: 'text'\n    },\n    table: {\n      type: {\n        summary: 'ReactNode'\n      }\n    }\n  },\n  rightContent: {\n    defaultValue: '$500',\n    control: {\n      type: 'text'\n    },\n    table: {\n      type: {\n        summary: 'ReactNode'\n      }\n    }\n  },\n  width: {\n    control: {\n      type: 'number'\n    },\n    defaultValue: '100%'\n  }\n};\nexport const LineItemTemplate = args => <LineItem {...args} mdxType=\"LineItem\" />;\n\nconst layoutProps = {\n  argTypes,\nLineItemTemplate\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Molecules/LineItem\" component={LineItem} argTypes={argTypes} parameters={{\n      actions: {\n        disabled: true\n      },\n      layout: 'padded',\n      design: {\n        type: 'figma',\n        url: 'https://www.figma.com/file/MsUWgABtjnh8LAttdex2q1/Quotes?node-id=571%3A1104'\n      }\n    }} mdxType=\"Meta\" />\n\n    <h1 {...{\n      \"id\": \"lineitem\"\n    }}>{`LineItem`}</h1>\n    <p><strong parentName=\"p\">{`DATE ADDED`}</strong>{`: 12/03/21 | `}<strong parentName=\"p\">{`PROJECT`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.notion.so/gethearth/Quotes-Bid-Estimate-Tool-c05b0b74bbb9404f8e2cc40dfdec044a\",\n        \"target\": \"_blank\",\n        \"rel\": \"nofollow noopener noreferrer\"\n      }}>{`Quotes`}</a></p>\n    <p>{`A `}<inlineCode parentName=\"p\">{`LineItem`}</inlineCode>{` is essentially two `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` values with dots as a separator between them.\nFirst added to support a receipt-esque run-down of values and totals in a `}<inlineCode parentName=\"p\">{`Quote`}</inlineCode>{`, with multiple line items that\nadd up to some total value.`}</p>\n    <br />\n    <hr></hr>\n    <br />\n    <h3 {...{\n      \"id\": \"usage-and-examples\"\n    }}>{`Usage and examples`}</h3>\n    <p>{`It has props `}<inlineCode parentName=\"p\">{`leftContent`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rightContent`}</inlineCode>{`, which are both of type `}<inlineCode parentName=\"p\">{`ReactNode`}</inlineCode>{`. It also has a\n`}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` prop, which is `}<inlineCode parentName=\"p\">{`100%`}</inlineCode>{` by default, and accepts a `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{` so that the width can be\na percentage or absolute pixel value.`}</p>\n    <br />\n    <h4 {...{\n      \"id\": \"default--basic\"\n    }}>{`Default / Basic:`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The most basic usage of a `}<inlineCode parentName=\"p\">{`LineItem`}</inlineCode>{`. The default `}<inlineCode parentName=\"p\">{`Typography`}</inlineCode>{` variant used is `}<inlineCode parentName=\"p\">{`p1`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Basic\" component={LineItem} args={{\n        leftContent: 'Discount',\n        rightContent: '-$10.00'\n      }} mdxType=\"Story\">\n    {LineItemTemplate.bind()}\n  </Story>\n    </Canvas>\n    <h4 {...{\n      \"id\": \"typography-variant\"\n    }}>{`Typography variant`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Since `}<inlineCode parentName=\"p\">{`leftContent`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rightContent`}</inlineCode>{` both accept `}<inlineCode parentName=\"p\">{`ReactNode`}</inlineCode>{`s, we can pass in a different\n`}<inlineCode parentName=\"p\">{`Typography`}</inlineCode>{` element to render other variants or colors.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Typography variant\" args={{\n        leftContent: <Typography variant=\"h2\" weight=\"semibold\" mdxType=\"Typography\">\n          Total\n        </Typography>,\n        rightContent: <Typography variant=\"h2\" weight=\"semibold\" color=\"success500\" mdxType=\"Typography\">\n          1,714.0\n        </Typography>\n      }} mdxType=\"Story\">\n    {LineItemTemplate.bind()}\n  </Story>\n    </Canvas>\n    <h4 {...{\n      \"id\": \"component-variant\"\n    }}>{`Component variant`}</h4>\n    <blockquote>\n      <p parentName=\"blockquote\">{`We can also pass in any other component to`}<inlineCode parentName=\"p\">{`leftContent`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rightContent`}</inlineCode>{`, such as an `}<inlineCode parentName=\"p\">{`icon`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Component variant\" args={{\n        leftContent: <AllInclusiveIcon fontSize=\"large\" mdxType=\"AllInclusiveIcon\" />,\n        rightContent: <AllInclusiveIcon fontSize=\"large\" mdxType=\"AllInclusiveIcon\" />\n      }} mdxType=\"Story\">\n    {LineItemTemplate.bind()}\n  </Story>\n    </Canvas>\n    <hr></hr>\n    <br />\n    <h3 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Playground\" mdxType=\"Story\">{LineItemTemplate.bind()}</Story>\n    </Canvas>\n    <ArgsTable of={LineItem} story=\"Playground\" mdxType=\"ArgsTable\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const basic = LineItemTemplate.bind();\nbasic.storyName = 'Basic';\nbasic.args = {\n  leftContent: 'Discount',\n  rightContent: '-$10.00'\n};\nbasic.parameters = { storySource: { source: 'args => <LineItem {...args} />' } };\n\nexport const typographyVariant = LineItemTemplate.bind();\ntypographyVariant.storyName = 'Typography variant';\ntypographyVariant.args = {\n  leftContent: <Typography variant=\"h2\" weight=\"semibold\">\n          Total\n        </Typography>,\n  rightContent: <Typography variant=\"h2\" weight=\"semibold\" color=\"success500\">\n          1,714.0\n        </Typography>\n};\ntypographyVariant.parameters = { storySource: { source: 'args => <LineItem {...args} />' } };\n\nexport const componentVariant = LineItemTemplate.bind();\ncomponentVariant.storyName = 'Component variant';\ncomponentVariant.args = {\n  leftContent: <AllInclusiveIcon fontSize=\"large\" />,\n  rightContent: <AllInclusiveIcon fontSize=\"large\" />\n};\ncomponentVariant.parameters = { storySource: { source: 'args => <LineItem {...args} />' } };\n\nexport const playground = LineItemTemplate.bind();\nplayground.storyName = 'Playground';\nplayground.parameters = { storySource: { source: 'args => <LineItem {...args} />' } };\n\nconst componentMeta = { title: 'Molecules/LineItem', parameters: {\n  actions: {\n    disabled: true\n  },\n  layout: 'padded',\n  design: {\n    type: 'figma',\n    url: 'https://www.figma.com/file/MsUWgABtjnh8LAttdex2q1/Quotes?node-id=571%3A1104'\n  }\n}, component: LineItem, argTypes: argTypes, includeStories: [\"basic\",\"typographyVariant\",\"componentVariant\",\"playground\"],  };\n\nconst mdxStoryNameToKey = {\"Basic\":\"basic\",\"Typography variant\":\"typographyVariant\",\"Component variant\":\"componentVariant\",\"Playground\":\"playground\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","var map = {\n\t\"./Colors.stories.mdx\": \"./src/Colors.stories.mdx\",\n\t\"./Template.stories.mdx\": \"./src/Template.stories.mdx\",\n\t\"./components/Card/Card.stories.mdx\": \"./src/components/Card/Card.stories.mdx\",\n\t\"./components/Card/Card.stories.tsx\": \"./src/components/Card/Card.stories.tsx\",\n\t\"./components/CardHeader/CardHeader.stories.tsx\": \"./src/components/CardHeader/CardHeader.stories.tsx\",\n\t\"./components/ImageGrid/ImageGrid.stories.mdx\": \"./src/components/ImageGrid/ImageGrid.stories.mdx\",\n\t\"./components/ImageGridItem/ImageGridItem.stories.tsx\": \"./src/components/ImageGridItem/ImageGridItem.stories.tsx\",\n\t\"./components/InformationCard/InformationCard.stories.tsx\": \"./src/components/InformationCard/InformationCard.stories.tsx\",\n\t\"./components/LineItem/LineItem.stories.mdx\": \"./src/components/LineItem/LineItem.stories.mdx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^|\\\\/|(?:(?:(?%21(?:^|\\\\/)\\\\.).)*?)\\\\/)(?%21\\\\.)(?=.)[^/]*?\\\\.stor(y|ies)\\\\.(tsx|ts|mdx))$\";","/* (ignored) */"],"names":[],"sourceRoot":""}